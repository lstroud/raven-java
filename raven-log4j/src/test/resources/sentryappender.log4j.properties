# Basic setup
log4j.rootLogger=trace, stdout, sentry

log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout

# Pattern to output the caller's file name and line number.
log4j.appender.stdout.layout.ConversionPattern=%5p [%t] (%F:%L) - %m%n

# Configure the Sentry appender. Note: when a SENTRY_DSN environment variable
# or system property is available, that value will be used instead of the value
# of log4j.appender.sentry.sentryDsn
log4j.appender.sentry=net.kencochrane.raven.log4j.SentryAppender
log4j.appender.sentry.sentryDsn=SENTRY_DSN
log4j.appender.sentry.tagGeneratorClass=net.kencochrane.raven.log4j.SentryAppenderTest$MockTagGenerator

# Add a JSONProcessor
log4j.appender.sentry.jsonProcessors=net.kencochrane.raven.log4j.SentryAppenderTest$MockJSONProcessor

# Do not let the Raven logging go to Sentry or you could end up in an infinite loop when
# something goes wrong with your configuration. Sentry uses the java.util.logging package
# so this should only happen when you add a bridge from JUL to Log4J.
log4j.logger.raven=DEBUG, stdout
log4j.additivity.raven=false